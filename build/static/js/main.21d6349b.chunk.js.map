{"version":3,"sources":["components/SearchForm/index.js","components/Navbar/index.js","components/Wrapper/index.js","components/EmployeeTable.js/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","htmlFor","id","value","search","onChange","handleInputChange","name","type","placeholder","Navbar","Wrapper","children","EmployeeTable","state","items","loading","fetch","then","response","json","setState","results","this","Table","striped","bordered","hover","map","item","src","picture","medium","alt","first","location","street","number","last","email","city","Component","App","rootElement","document","getElementById","ReactDOM","render","Boolean","window","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sUA0BeA,MAtBf,SAAoBC,GAChB,OACI,0BAAMC,UAAU,UACZ,yBAAKA,UAAU,sCACX,2BAAOC,QAAQ,WAAWC,GAAG,aAA7B,kBACA,2BACIC,MAAOJ,EAAMK,OACbC,SAAUN,EAAMO,kBAChBC,KAAK,SACLC,KAAK,OACLR,UAAU,eACVS,YAAY,0BACZP,GAAG,cATX,U,YCOGQ,MAVf,WACI,OACI,yBAAKV,UAAU,mDACX,yBAAKA,UAAU,gBAAf,wB,MCAGW,MAJf,SAAiBZ,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMa,W,gDC2D5BC,E,kDAxDX,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IACDe,MAAQ,CACTC,MAAO,GACPC,SAAS,GAJE,E,gEAQE,IAAD,OAChBC,MAAM,yCACDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAD,OAAc,EAAKE,SAAS,CAC9BN,MAAOI,EAASG,QAChBN,SAAS,S,+BAIX,IAAD,EACoBO,KAAKT,MAAxBC,EADD,EACCA,MACN,OAFK,EACQC,QAQL,yBAAKhB,UAAU,aAEX,kBAACwB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACI,4BACI,uCACA,kCACA,oCACA,qCACA,0CAGPZ,EAAMa,KAAI,SAAAC,GAAI,OACX,+BACI,4BACI,4BAAI,yBAAKC,IAAKD,EAAKE,QAAQC,OAAQC,IAAKJ,EAAKtB,KAAK2B,SAClD,4BAAKL,EAAKM,SAASC,OAAOC,QAC1B,4BAAKR,EAAKtB,KAAK2B,MAAf,OAA4BL,EAAKtB,KAAK+B,MACtC,4BAAKT,EAAKU,OACV,4BAAKV,EAAKM,SAASK,KAAnB,QAAgCX,EAAKM,SAASrB,cAxBlE,+C,GAvBY2B,aCK5B,SAASC,IAEP,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,yBAAK1C,UAAU,YACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,QAGJ,kBAAC,EAAD,KACE,yBAAKA,UAAU,OACb,6BACA,kBAAC,EAAD,UAQZ,IAAM2C,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GAEVD,QCvBKM,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCZNL,IAASC,OACP,kBAAC,IAAMK,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASC,eAAe,SDyHpB,kBAAmBQ,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.21d6349b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm(props) {\n    return (\n        <form className=\"search\">\n            <div className=\"form-inline justify-content-center\">\n                <label htmlFor=\"language\" id=\"formLabel\">Find Employee:</label>\n                <input\n                    value={props.search}\n                    onChange={props.handleInputChange}\n                    name=\"search\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Type to start searching\"\n                    id=\"nameInput\"\n                />&nbsp;\n        {/*<button id=\"searchButton\" type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\n          Search\n        </button>*/}\n            </div>\n        </form>\n    );\n}\n\nexport default SearchForm;","import React from \"react\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-lg  justify-content-center\">\n            <div className=\"navbar-brand\">\n                Employee Directory\n      </div>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React, { Component } from 'react';\n//import { JsonToTable } from \"react-json-to-table\";\nimport \"./style.css\";\nimport { Table } from \"react-bootstrap\";\n\nclass EmployeeTable extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            items: [],\n            loading: false\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://randomuser.me/api/?results=20\")\n            .then((response) => response.json())\n            .then((response) => this.setState({\n                items: response.results,\n                loading: true\n            }));\n    }\n\n    render() {\n        var { items, loading } = this.state;\n        if (!loading) {\n            return (\n                <div>Loading...</div>\n            )\n        }\n        else {\n            return (\n                <div className=\"container\">\n\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th>Picture</th>\n                                <th>ID</th>\n                                <th>Name</th>\n                                <th>Email</th>\n                                <th>Location</th>\n                            </tr>\n                        </thead>\n                        {items.map(item => (\n                            <tbody>\n                                <tr>\n                                    <td><img src={item.picture.medium} alt={item.name.first} /></td>\n                                    <td>{item.location.street.number}</td>\n                                    <td>{item.name.first}&nbsp;{item.name.last}</td>\n                                    <td>{item.email}</td>\n                                    <td>{item.location.city},&nbsp;{item.location.state}</td>\n                                </tr>\n                            </tbody>\n                        ))}\n                    </Table>\n                </div>\n            )\n        }\n    }\n};\n\nexport default EmployeeTable;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport SearchForm from \"./components/SearchForm\";\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport EmployeeTable from \"./components/EmployeeTable.js\";\n\nfunction App() {\n\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <div className=\"row mr-0\">\n          <div className=\"col-md-12\">\n            <SearchForm />\n          </div>\n        </div>\n        <Wrapper>\n          <div className=\"App\">\n            <br />\n            <EmployeeTable />\n          </div>\n        </Wrapper>\n      </div>\n    </Router>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}